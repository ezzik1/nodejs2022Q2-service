openapi: 3.0.0
info:
  title: Home Library Service
  version: 1.0.0
  description: Home music library service
paths:
  /favs:
    get:
      tags:
        - Favorites
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favorites'
          description: Successful operation
      summary: Get all favorites
      description: 'Gets all favorites movies, tracks and books'
  '/favs/album/{id}':
    post:
      tags:
        - Favorites
      responses:
        '201':
          description: Added succesfully
        '400':
          $ref: '#/components/responses/NotUUIDID'
        '422':
          description: Album with id doesn't exist.
      summary: Add album to the favorites
      description: Add album to the favorites
    delete:
      tags:
        - Favorites
      responses:
        '204':
          description: Deleted succesfully
        '400':
          $ref: '#/components/responses/NotUUIDID'
        '404':
          description: Album was not found.
      summary: Delete album from favorites
      description: Delete album from favorites
    parameters:
      - name: id
        schema:
          format: uuid
          type: string
        in: path
        required: true
  '/favs/artist/{id}':
    post:
      tags:
        - Favorites
      responses:
        '201':
          description: Added succesfully
        '400':
          $ref: '#/components/responses/NotUUIDID'
        '422':
          description: Artist with id doesn't exist.
      summary: Add artist to the favorites
      description: Add artist to the favorites
    delete:
      tags:
        - Favorites
      responses:
        '204':
          description: Deleted succesfully
        '400':
          $ref: '#/components/responses/NotUUIDID'
        '404':
          description: Artist was not found.
      summary: Delete artist from favorites
      description: Delete artist from favorites
    parameters:
      - name: id
        schema:
          format: uuid
          type: string
        in: path
        required: true
  '/favs/track/{id}':
    post:
      tags:
        - Favorites
      responses:
        '201':
          description: Added succesfully
        '400':
          $ref: '#/components/responses/NotUUIDID'
        '422':
          description: Track with id doesn't exist.
      summary: Add track to the favorites
      description: Add track to the favorites
    delete:
      tags:
        - Favorites
      responses:
        '204':
          description: Deleted succesfully
        '400':
          $ref: '#/components/responses/NotUUIDID'
        '404':
          description: Track was not found.
      summary: Delete track from favorites
      description: Delete track from favorites
    parameters:
      - name: id
        schema:
          format: uuid
          type: string
        in: path
        required: true
  /user:
    get:
      tags:
        - Users
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: Successful operation
      summary: Get all users
      description: Gets all users
    post:
      requestBody:
        content:
          application/json:
            schema:
              title: example
              required:
                - login
                - password
              type: object
              properties:
                login:
                  description: The user's login
                  type: string
                password:
                  description: The user's password
                  type: string
        required: true
      tags:
        - Users
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: The user has been created.
        '400':
          description: Bad request. body does not contain required fields
      summary: Create user
      description: Creates a new user
  '/user/{userId}':
    get:
      tags:
        - Users
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Successful operation
        '400':
          $ref: '#/components/responses/NotUUIDID'
        '404':
          description: User not found
      summary: Get single user by id
      description: Get single user by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              title: example
              required:
                - oldPassword
                - newPassword
              type: object
              properties:
                oldPassword:
                  description: The user's old password
                  type: string
                newPassword:
                  description: The user's new password
                  type: string
        required: true
      tags:
        - Users
      responses:
        '200':
          content:
            application/json:
              schema:
                title: example
                type: object
                properties:
                  id:
                    format: uuid
                    type: string
                  login:
                    type: string
                    example: TestUser
                  version:
                    type: integer
                    example: 2
                  createAt:
                    type: integer
                    example: 1655000000
                  updateAt:
                    type: integer
                    example: 1655999999
          description: The user has been updated.
        '400':
          $ref: '#/components/responses/NotUUIDID'
        '403':
          description: oldPassowrd is wrong
        '404':
          description: User not found
      summary: Update a user's password
      description: Updates a user's password by ID
    delete:
      tags:
        - Users
      responses:
        '204':
          description: The user has been deleted
        '400':
          $ref: '#/components/responses/NotUUIDID'
        '404':
          description: User not found
      summary: Delete user
      description: Deletes user by ID.
    parameters:
      - name: userId
        schema:
          type: string
        in: path
        required: true
  /track:
    get:
      tags:
        - Track
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
          description: Successful operation
      summary: Get tracks list
      description: Gets all library tracks list
    post:
      requestBody:
        content:
          application/json:
            schema:
              required:
                - name
                - duration
              type: object
              properties:
                name:
                  type: string
                artistId:
                  format: uuid
                  type: string
                albumId:
                  format: uuid
                  type: string
                duration:
                  description: In seconds
                  type: integer
        required: true
      tags:
        - Track
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
          description: Successful operation
        '400':
          description: Bad request. body does not contain required fields
      summary: Add new track
      description: Add new track information
  '/track/{id}':
    get:
      tags:
        - Track
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
          description: Successful operation
        '400':
          $ref: '#/components/responses/NotUUIDID'
        '404':
          description: Track was not found.
      summary: Get single track by id
      description: Gets single track by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              title: example
              required:
                - name
                - duration
              type: object
              properties:
                name:
                  type: string
                  example: Bohemian Rhapsody
                artistId:
                  nullable: true
                  format: uuid
                  type: string
                duration:
                  description: In seconds
                  type: integer
                  example: 355
                albumId:
                  nullable: true
                  format: uuid
                  type: string
        required: true
      tags:
        - Track
      responses:
        '200':
          content:
            application/json:
              schema:
                title: example
                type: object
                properties:
                  id:
                    format: uuid
                    type: string
                  name:
                    type: string
                    example: Bohemian Rhapsody
                  artistId:
                    nullable: true
                    format: uuid
                    type: string
                  duration:
                    description: In seconds
                    type: integer
                    example: 355
                  albumId:
                    nullable: true
                    format: uuid
                    type: string
          description: The track has been updated.
        '400':
          $ref: '#/components/responses/NotUUIDID'
        '404':
          description: Track was not found.
      summary: Update track information
      description: Update library track information by UUID
    delete:
      tags:
        - Track
      responses:
        '204':
          description: Delelted succesfully
        '400':
          $ref: '#/components/responses/NotUUIDID'
        '404':
          description: Track was not found.
      summary: Delete track
      description: Delete track from library
    parameters:
      - name: id
        schema:
          format: uuid
          type: string
        in: path
        required: true
  /artist:
    get:
      tags:
        - Artist
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
          description: Successful operation
      summary: Get all artists
      description: Gets all artists
    post:
      requestBody:
        content:
          application/json:
            schema:
              required:
                - name
                - grammy
              type: object
              properties:
                name:
                  type: string
                grammy:
                  type: boolean
        required: true
      tags:
        - Artist
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
          description: Successful operation
        '400':
          description: Bad request. body does not contain required fields
      summary: Add new artist
      description: Add new artist
  '/artist/{id}':
    get:
      tags:
        - Artist
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
          description: Successful operation
        '400':
          $ref: '#/components/responses/NotUUIDID'
        '404':
          description: Artist was not found.
      summary: Get single artist by id
      description: Get single artist by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              required:
                - name
                - grammy
              type: object
              properties:
                name:
                  type: string
                grammy:
                  type: boolean
        required: true
      tags:
        - Artist
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
          description: The artist has been updated.
        '400':
          $ref: '#/components/responses/NotUUIDID'
        '404':
          description: Artist was not found.
      summary: Update artist information
      description: Update artist information by UUID
    delete:
      tags:
        - Artist
      responses:
        '204':
          description: Delelted succesfully
        '400':
          $ref: '#/components/responses/NotUUIDID'
        '404':
          description: Artist was not found.
      summary: Delete artist
      description: Delete artist from library
    parameters:
      - name: id
        schema:
          format: uuid
          type: string
        in: path
        required: true
  /album:
    get:
      tags:
        - Album
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
          description: Successful operation
      summary: Get albums list
      description: Gets all library alibums list
    post:
      requestBody:
        content:
          application/json:
            schema:
              title: example
              required:
                - name
                - year
              type: object
              properties:
                name:
                  type: string
                year:
                  type: integer
                artistId:
                  nullable: true
                  format: uuid
                  type: string
        required: true
      tags:
        - Album
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
          description: Almub is created
        '400':
          description: Bad request. body does not contain required fields
      summary: Add new album
      description: Add new album information
  '/album/{id}':
    get:
      tags:
        - Album
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
          description: Successful operation
        '400':
          $ref: '#/components/responses/NotUUIDID'
        '404':
          description: Album was not found.
      summary: Get single album by id
      description: Gets single album by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              title: example
              required:
                - name
                - year
              type: object
              properties:
                name:
                  type: string
                year:
                  type: integer
                artistId:
                  nullable: true
                  format: uuid
                  type: string
        required: true
      tags:
        - Album
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
          description: The album has been updated.
        '400':
          $ref: '#/components/responses/NotUUIDID'
        '404':
          description: Album was not found.
      summary: Update album information
      description: Update library album information by UUID
    delete:
      tags:
        - Album
      responses:
        '204':
          description: Deleted succesfully
        '400':
          $ref: '#/components/responses/NotUUIDID'
        '404':
          description: Album was not found.
      summary: Delete album
      description: Delete album from library
    parameters:
      - name: id
        schema:
          format: uuid
          type: string
        in: path
        required: true
components:
  schemas:
    User:
      required:
        - id
        - login
      type: object
      properties:
        id:
          format: uuid
          type: string
        login:
          type: string
          example: TestUser
        version:
          type: number
          example: 1
        createAt:
          type: number
          example: 1655000000
        updateAt:
          type: number
          example: 1655000000
    Artist:
      required:
        - id
        - name
      type: object
      properties:
        id:
          format: uuid
          type: string
        name:
          type: string
          example: Freddie Mercury
        grammy:
          type: boolean
          example: false
    Album:
      required:
        - id
        - name
      type: object
      properties:
        id:
          format: uuid
          type: string
        name:
          type: string
          example: Innuendo
        year:
          type: integer
          example: 1991
        artistId:
          nullable: true
          format: uuid
          type: string
    Track:
      required:
        - id
        - name
        - duration
      type: object
      properties:
        id:
          format: uuid
          type: string
        name:
          type: string
          example: The Show Must Go On
        artistId:
          nullable: true
          format: uuid
          type: string
        albumId:
          nullable: true
          format: uuid
          type: string
        duration:
          description: In seconds
          type: integer
          example: 262
    Favorites:
      type: object
      properties:
        artists:
          type: array
          items:
            $ref: '#/components/schemas/Artist'
        albums:
          type: array
          items:
            $ref: '#/components/schemas/Album'
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    NotUUIDID:
      description: Bad format ID

